%% etcd host

{mapping, "cluster_formation.etcd.host", "rabbit.cluster_formation.peer_discovery_etcd.etcd_host", [
    {datatype, string}
]}.

{translation, "rabbit.cluster_formation.peer_discovery_etcd.etcd_host",
fun(Conf) ->
    case cuttlefish:conf_get("cluster_formation.etcd.host", Conf, undefined) of
        undefined -> cuttlefish:unset();
        Value     -> Value
    end
end}.

%% etcd port

{mapping, "cluster_formation.etcd.port", "rabbit.cluster_formation.peer_discovery_etcd.etcd_port", [
    {datatype, integer},
    {validators, ["non_negative_integer"]}
]}.

{translation, "rabbit.cluster_formation.peer_discovery_etcd.etcd_port",
fun(Conf) ->
    case cuttlefish:conf_get("cluster_formation.etcd.port", Conf, undefined) of
        undefined -> cuttlefish:unset();
        Value     -> Value
    end
end}.

%% etcd scheme

{mapping, "cluster_formation.etcd.scheme", "rabbit.cluster_formation.peer_discovery_etcd.etcd_scheme", [
    {datatype, string}
]}.

{translation, "rabbit.cluster_formation.peer_discovery_etcd.etcd_scheme",
fun(Conf) ->
    case cuttlefish:conf_get("cluster_formation.etcd.scheme", Conf, undefined) of
        undefined -> cuttlefish:unset();
        Value     -> Value
    end
end}.

%% etcd key prefix

{mapping, "cluster_formation.etcd.key_prefix", "rabbit.cluster_formation.peer_discovery_etcd.etcd_prefix", [
    {datatype, string}
]}.

{translation, "rabbit.cluster_formation.peer_discovery_etcd.etcd_prefix",
fun(Conf) ->
    case cuttlefish:conf_get("cluster_formation.etcd.key_prefix", Conf, undefined) of
        undefined -> cuttlefish:unset();
        Value     -> Value
    end
end}.

%% ttl

{mapping, "cluster_formation.etcd.ttl", "rabbit.cluster_formation.peer_discovery_etcd.etcd_ttl", [
    {datatype, integer},
    {validators, ["non_negative_integer"]}
]}.

{translation, "rabbit.cluster_formation.peer_discovery_etcd.etcd_ttl",
fun(Conf) ->
    case cuttlefish:conf_get("cluster_formation.etcd.ttl", Conf, undefined) of
        undefined -> cuttlefish:unset();
        Value     -> Value
    end
end}.
